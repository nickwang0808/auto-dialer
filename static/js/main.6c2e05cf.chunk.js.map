{"version":3,"sources":["components/info.js","components/calllogs.jsx","components/topbar.js","components/logging.js","components/email.js","components/message.js","testdial.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["Info","customer","undefined","Box","p","fontSize","fontWeight","mb","Name","Grid","container","spacing","direction","item","xs","Cell","Home","Work","Address","useStyles","makeStyles","root","background","alt","Note","date","content","className","CallLogs","data","classes","borderColor","border","overflow","height","m","map","d","key","indexOf","theme","flexGrow","menuButton","marginRight","TopBar","handleNext","handleStart","handlePause","callStatus","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","onClick","style","grey","Button","Logging","props","useState","padding","ButtonGroup","fullWidth","size","loadNotInt","loadCallBack","loadHungUp","loadWrongNum","TextField","label","multiline","rows","EmailBox","orientation","mt","Message","wait","time","Promise","resolve","setTimeout","callNumber","name","number","attempts","a","call","counter","console","log","start","innerI","callCustomer","numbersToCall","i","length","num","App","loggedNotes","setLoggedNotes","customers","setCustomers","setDate","currentIndex","setCurrentIndex","calling","setCalling","useEffect","today","Date","toISOString","slice","fetch","response","json","customerList","fetchData","currentCustomer","run","Container","py","CssBaseline","newNote","loggedNotesCopy","unshift","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","blue","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6c2e05cf.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Box } from \"@material-ui/core\";\n\nfunction Info({ customer }) {\n  // had to use a if statement to catch the pre ajax state as undefined error\n  if (customer !== undefined) {\n    return (\n      <>\n        <Box p={2}>\n          <Box fontSize={24} fontWeight=\"bold\" mb={2}>\n            {customer.Name}\n          </Box>\n          <Grid container spacing={2}>\n            <Grid container direction=\"column\" item xs spacing={0}>\n              <Box>{`Cell: ${customer.Cell}`}</Box>\n              <Box>{`Home: ${customer.Home}`}</Box>\n              <Box>{`Work: ${customer.Work}`}</Box>\n            </Grid>\n            <Grid container direction=\"column\" item xs spacing={0}>\n              <Box>{`Address: ${customer.Address}`}</Box>\n              <Box>{`Postal: S7G 1tL`}</Box>\n            </Grid>\n          </Grid>\n        </Box>\n      </>\n    );\n  } else return <Box />;\n}\n\nexport default Info;\n","import React from \"react\";\nimport { Box, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"#f3f3f3\",\n  },\n  alt: {\n    background: \"#ffffff\",\n  },\n});\n\nfunction Note({ date, content, className }) {\n  const classes = useStyles();\n  return (\n    <>\n      <Box className={className} p={2}>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <Box fontSize={12}>{date}</Box>\n          </Grid>\n          <Grid item>\n            <Box>{content}</Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n\nfunction CallLogs({ data }) {\n  const classes = useStyles();\n\n  return (\n    <Box borderColor=\"grey.300\" border={1} overflow=\"auto\" height=\"60vh\">\n      <Box m={2}>Last Contact Attempt: {\"24\"}</Box>\n      {data.map((d) => (\n        <Note\n          key={d.content}\n          date={d.date}\n          content={d.content}\n          className={data.indexOf(d) % 2 === 0 ? classes.root : classes.alt}\n        />\n      ))}\n    </Box>\n  );\n}\n\nexport default CallLogs;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport PlayCircleFilled from \"@material-ui/icons/PlayCircleFilled\";\nimport PauseCircleFilled from \"@material-ui/icons/PauseCircleFilled\";\nimport { grey } from \"@material-ui/core/colors\";\nimport { Box, Button } from \"@material-ui/core\";\nimport \"animate.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function TopBar({\n  handleNext,\n  handleStart,\n  handlePause,\n  callStatus,\n}) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"body1\" color=\"inherit\">\n            Dashboard\n          </Typography>\n          <Box className={classes.root} />\n          <Box className=\"animate__animated animate__pulse animate__infinite\">\n            {callStatus\n              ? \"calling, press cltr + shft + J to view call logs\"\n              : \"\"}\n          </Box>\n          <IconButton onClick={handleStart}>\n            <PlayCircleFilled style={{ color: grey[50] }} />\n          </IconButton>\n          <IconButton onClick={handlePause}>\n            <PauseCircleFilled style={{ color: grey[50] }} />\n          </IconButton>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleNext}>\n            Next\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Box, Grid, Button, TextField, ButtonGroup } from \"@material-ui/core\";\n\nfunction Logging(props) {\n  const [callNote, setCallNote] = useState();\n\n  return (\n    <>\n      <Box padding={2}>\n        <Grid container direction=\"column\" spacing={1}>\n          <Grid item xs>\n            <ButtonGroup\n              variant=\"outlined\"\n              color=\"primary\"\n              fullWidth\n              size=\"small\"\n            >\n              <Button onClick={props.loadNotInt}>Not int</Button>\n              <Button onClick={props.loadCallBack}>Call Back</Button>\n              <Button onClick={props.loadHungUp}>Hung up</Button>\n              <Button onClick={props.loadWrongNum}>Wrong num</Button>\n            </ButtonGroup>\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"Log your note here\"\n              fullWidth\n              multiline\n              rows={2}\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n\nexport default Logging;\n","import React from \"react\";\nimport { Box, Button, Grid, TextField, ButtonGroup } from \"@material-ui/core\";\n\nfunction EmailBox(props) {\n  return (\n    <>\n      <Box p={2}>\n        <Grid container direction=\"row\">\n          <Grid item container direction=\"row\">\n            <Grid item xs>\n              <ButtonGroup\n                variant=\"outlined\"\n                orientation=\"vertical\"\n                size=\"small\"\n                color=\"primary\"\n                fullWidth\n              >\n                <Button>Email 1</Button>\n                <Button>Email 2</Button>\n                <Button>Email 3</Button>\n              </ButtonGroup>\n            </Grid>\n            <Grid item xs>\n              <ButtonGroup\n                variant=\"outlined\"\n                orientation=\"vertical\"\n                size=\"small\"\n                color=\"primary\"\n                fullWidth\n              >\n                <Button>Email 4</Button>\n                <Button>Email 5</Button>\n                <Button>Email 6</Button>\n              </ButtonGroup>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box mt={2}>\n          <TextField\n            label=\"you template is here\"\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            rows={5}\n          />\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nexport default EmailBox;\n","import React from \"react\";\nimport { Box, Button, Grid, TextField, ButtonGroup } from \"@material-ui/core\";\n\nfunction Message(props) {\n  return (\n    <>\n      <Box p={2}>\n        <Grid container direction=\"row\">\n          <Grid item container direction=\"row\">\n            <Grid item xs>\n              <ButtonGroup\n                variant=\"outlined\"\n                orientation=\"vertical\"\n                size=\"small\"\n                color=\"primary\"\n                fullWidth\n              >\n                <Button>Text 1</Button>\n                <Button>Text 2</Button>\n                <Button>Text 3</Button>\n              </ButtonGroup>\n            </Grid>\n            <Grid item xs>\n              <ButtonGroup\n                variant=\"outlined\"\n                orientation=\"vertical\"\n                size=\"small\"\n                color=\"primary\"\n                fullWidth\n              >\n                <Button>Text 4</Button>\n                <Button>Text 5</Button>\n                <Button>Text 6</Button>\n              </ButtonGroup>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box mt={2}>\n          <TextField\n            label=\"you template is here\"\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            rows={5}\n          />\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nexport default Message;\n","const waitTime = 1000;\n\nconst wait = (time) => {\n  return new Promise((resolve) => setTimeout(resolve, time));\n};\n\nasync function callNumber(name, number, attempts) {\n  const call = (counter) => {\n    console.log(`Calling ${name}: ${number} x ${counter}`);\n  };\n\n  const start = async () => {\n    for (let innerI = 0; innerI < attempts; innerI++) {\n      call(innerI + 1);\n      await wait(waitTime);\n    }\n  };\n  await start();\n}\n\n// this function calls all numbers of a customer\nexport default async function callCustomer(name, numbersToCall) {\n  // had to declare testDial() as async and then call it with await.\n  for (let i = 0; i < numbersToCall.length; i++) {\n    await callNumber(name, numbersToCall[i].num, numbersToCall[i].attempts);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport Info from \"./components/info\";\nimport { CssBaseline, Grid, Container, Box } from \"@material-ui/core\";\nimport CallLogs from \"./components/calllogs\";\nimport TopBar from \"./components/topbar\";\nimport Logging from \"./components/logging\";\nimport EmailBox from \"./components/email\";\nimport Message from \"./components/message\";\nimport callCustomer from \"./testdial\";\n\nfunction App() {\n  const [loggedNotes, setLoggedNotes] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [date, setDate] = useState();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [calling, setCalling] = useState(false);\n  const [callInfo, setCallInfo] = useState(\"\");\n\n  useEffect(() => {\n    let today = new Date().toISOString().slice(0, 10);\n    setDate(today);\n  }, []);\n\n  useEffect(() => {\n    // use local files for now\n    const fetchData = async () => {\n      // const response = await fetch(\n      //   \"https://storage.googleapis.com/nickwangstorage/jsonfiles/democustomer.json\"\n      // );\n      const response = await fetch(\"customers.json\");\n      const customerList = await response.json();\n      setCustomers(customerList);\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    // use local files for now\n    const fetchData = async () => {\n      // const response = await fetch(\"http://localhost:3000/notes\");\n      const response = await fetch(\"notes.json\");\n      const loggedNotes = await response.json();\n      setLoggedNotes(loggedNotes);\n    };\n    fetchData();\n  }, []);\n\n  // ---- Note logging Button functions\n  const loadNotInt = () => {\n    const newNote = {\n      date: [date],\n      content: \"Not Interested\" + \"  - Power Dialer\",\n    };\n    let loggedNotesCopy = loggedNotes.slice();\n    loggedNotesCopy.unshift(newNote);\n    setLoggedNotes(loggedNotesCopy);\n  };\n\n  const loadCallBack = () => {\n    const newNote = {\n      date: [date],\n      content: \"Call Back needed\" + \"  - Power Dialer\",\n    };\n    let loggedNotesCopy = loggedNotes.slice();\n    loggedNotesCopy.unshift(newNote);\n    setLoggedNotes(loggedNotesCopy);\n  };\n\n  const loadHungUp = () => {\n    const newNote = {\n      date: [date],\n      content: \"Hung up\" + \"  - Power Dialer\",\n    };\n    let loggedNotesCopy = loggedNotes.slice();\n    loggedNotesCopy.unshift(newNote);\n    setLoggedNotes(loggedNotesCopy);\n  };\n\n  const loadWrongNum = () => {\n    const newNote = {\n      date: [date],\n      content: \"Wrong number\" + \"  - Power Dialer\",\n    };\n    let loggedNotesCopy = loggedNotes.slice();\n    loggedNotesCopy.unshift(newNote);\n    setLoggedNotes(loggedNotesCopy);\n  };\n  // ---- end of Note logging Button functions\n\n  const handleNext = () => {\n    console.log(\"Next Customer\");\n    const currentIndexCopy = currentIndex;\n    setCurrentIndex(currentIndexCopy + 1);\n  };\n\n  // this code calls the current customer and go to next customer\n  useEffect(() => {\n    const run = async () => {\n      if (calling) {\n        const currentCustomer = customers[currentIndex];\n\n        const numbersToCall = [\n          { num: currentCustomer.Cell, attempts: 3 },\n          { num: currentCustomer.Home, attempts: 3 },\n          { num: currentCustomer.Work, attempts: 1 },\n        ];\n\n        await callCustomer(currentCustomer.Name, numbersToCall);\n        console.log(\"this customer is called\");\n        handleNext();\n      }\n    };\n    run();\n  });\n\n  const handlePause = () => {\n    setCalling(false);\n  };\n\n  const handleStart = () => {\n    setCalling(true);\n  };\n\n  return (\n    <>\n      <TopBar\n        handleNext={handleNext}\n        handlePause={handlePause}\n        handleStart={handleStart}\n        callStatus={calling}\n      />\n      <Container>\n        <Box py={2}>\n          <CssBaseline />\n\n          <Grid container spacing={4}>\n            <Grid container direction=\"column\" item xs>\n              <Grid item xs>\n                <Info customer={customers[currentIndex]} />\n              </Grid>\n\n              <Grid item xs>\n                <CallLogs data={loggedNotes} />\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"column\" item xs spacing={2}>\n              {/* <Grid item xs>\n                <DialBox callInfo={callInfo} />\n              </Grid> */}\n\n              <Grid item xs>\n                <Logging\n                  loadCallBack={loadCallBack}\n                  loadHungUp={loadHungUp}\n                  loadNotInt={loadNotInt}\n                  loadWrongNum={loadWrongNum}\n                />\n              </Grid>\n\n              <Grid container direction=\"row\" item xs>\n                <Grid item xs>\n                  <EmailBox />\n                </Grid>\n                <Grid item xs>\n                  <Message />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core\";\nimport blue from \"@material-ui/core/colors/blue\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[600],\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}